Output from a dependent package's init function
// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package  example

import (
  easyjson "github.com/mailru/easyjson"
  jlexer "github.com/mailru/easyjson/jlexer"
  json "encoding/json"
  jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
   _ *json.RawMessage
   _ *jlexer.Lexer
   _ *jwriter.Writer
   _ easyjson.Marshaler
)

func easyjsonEeca4a30DecodeGithubComDrichelsonEasyjsonBugReproExample(in *jlexer.Lexer, out *A) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeFieldName(false)
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    default:
      in.SkipRecursive()
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonEeca4a30EncodeGithubComDrichelsonEasyjsonBugReproExample(out *jwriter.Writer, in A) {
  out.RawByte('{')
  first := true
  _ = first
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v A) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonEeca4a30EncodeGithubComDrichelsonEasyjsonBugReproExample(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v A) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonEeca4a30EncodeGithubComDrichelsonEasyjsonBugReproExample(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *A) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonEeca4a30DecodeGithubComDrichelsonEasyjsonBugReproExample(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *A) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonEeca4a30DecodeGithubComDrichelsonEasyjsonBugReproExample(l, v)
}
